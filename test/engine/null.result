env = require('test_run')
---
...
test_run = env.new()
---
...
engine = test_run:get_cfg('engine')
---
...
msgpack = require('msgpack')
---
...
--
-- gh-1557: box.NULL in indexes.
--
box.NULL == msgpack.NULL
---
- true
...
box.NULL == nil
---
- true
...
msgpack.decode(msgpack.encode({box.NULL}))
---
- [null]
- 3
...
format = {}
---
...
format[1] = { name = 'field1', type = 'unsigned' }
---
...
format[2] = { name = 'field2', type = 'unsigned', is_nullable = true }
---
...
s = box.schema.space.create('test', { engine = engine, format = format })
---
...
-- Bad nullable value.
format[2].is_nullable = 100
---
...
s:format(format) -- Fail.
---
- error: 'Wrong space format (field 2): ''is_nullable'' must be boolean'
...
-- Primary can not be nullable.
parts = {}
---
...
parts[1] = {field = 2, type = 'unsigned', is_nullable = true}
---
...
pk = s:create_index('pk', { parts = parts }) -- Fail.
---
- error: Primary index of the space 'test' can not contain nullable parts
...
pk = s:create_index('pk')
---
...
-- Not TREE nullable.
-- Do not print errmsg, because Vinyl's one is different - it does
-- not support HASH.
ok = pcall(s.create_index, s, 'sk', { parts = parts, type = 'hash' }) -- Fail.
---
...
ok
---
- false
...
-- Conflict of is_nullable in format and in parts.
parts[1].is_nullable = false
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: Field 2 is nullable in space format, but not nullable in index parts
...
-- Try skip nullable in format and specify in part.
parts[1].is_nullable = true
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
format[2].is_nullable = nil
---
...
s:format(format) -- Fail.
---
- error: Field 2 is not nullable in space format, but nullable in index parts
...
sk:drop()
---
...
-- Try to set nullable in part with no format.
s:format({})
---
...
sk = s:create_index('sk', { parts = parts })
---
...
-- And then set format with no nullable.
s:format(format) -- Fail.
---
- error: Field 2 is not nullable in space format, but nullable in index parts
...
format[2].is_nullable = true
---
...
s:format(format) -- Ok.
---
...
-- Test insert.
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, box.NULL}
---
- [2, null]
...
s:insert{3, box.NULL}
---
- [3, null]
...
s:insert{4, 1} -- Fail.
---
- error: Duplicate key exists in unique index 'sk' in space 'test'
...
s:insert{4, 4}
---
- [4, 4]
...
s:insert{5, box.NULL}
---
- [5, null]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
-- Test exact match.
sk:get({1})
---
- [1, 1]
...
sk:get({box.NULL}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
sk:update({1}, {})
---
- [1, 1]
...
sk:update({box.NULL}, {}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
_ = sk:delete({1})
---
...
sk:delete({box.NULL}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
s:insert({1, 1})
---
- [1, 1]
...
-- Test iterators.
sk:select{box.NULL}
---
- - [2, null]
  - [3, null]
  - [5, null]
...
sk:select({box.NULL}, {iterator = 'LE'})
---
- - [5, null]
  - [3, null]
  - [2, null]
...
sk:select({box.NULL}, {iterator = 'LT'})
---
- []
...
sk:select({box.NULL}, {iterator = 'GE'})
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
sk:select({box.NULL}, {iterator = 'GT'})
---
- - [1, 1]
  - [4, 4]
...
_ = sk:delete{box.NULL}
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
-- Test snapshot during iterator (Vinyl restore).
create_iterator = require('utils').create_iterator
---
...
iter = create_iterator(sk, {box.NULL})
---
...
iter.next()
---
- [2, null]
...
box.snapshot()
---
- ok
...
iter.iterate_over()
---
- 0: [3, null]
  1: [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
-- Test replace.
s:replace{2, 2}
---
- [2, 2]
...
s:replace{3, box.NULL} -- no changes.
---
- [3, null]
...
s:replace{6, box.NULL}
---
- [6, null]
...
pk:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, null]
  - [4, 4]
  - [5, null]
  - [6, null]
...
sk:select{}
---
- - [3, null]
  - [5, null]
  - [6, null]
  - [1, 1]
  - [2, 2]
  - [4, 4]
...
-- Test not unique indexes.
s:truncate()
---
...
sk:drop()
---
...
sk = s:create_index('sk', { parts = parts, unique = false })
---
...
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, box.NULL}
---
- [2, null]
...
s:insert{3, box.NULL}
---
- [3, null]
...
s:insert{4, 1}
---
- [4, 1]
...
s:insert{5, box.NULL}
---
- [5, null]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 1]
  - [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 1]
...
-- Test several secondary indexes.
s:truncate()
---
...
format[2].is_nullable = true
---
...
format[3] = { name = 'field3', type = 'unsigned', is_nullable = true }
---
...
s:format(format)
---
...
parts[1].field = 3
---
...
sk2 = s:create_index('sk2', { parts = parts })
---
...
s:replace{4, 3, 4}
---
- [4, 3, 4]
...
s:replace{3, 3, 3}
---
- [3, 3, 3]
...
s:replace{2, box.NULL, box.NULL}
---
- [2, null, null]
...
s:replace{1, box.NULL, 1}
---
- [1, null, 1]
...
s:replace{0, 0, box.NULL}
---
- [0, 0, null]
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [2, null, null]
  - [3, 3, 3]
  - [4, 3, 4]
...
sk:select{}
---
- - [1, null, 1]
  - [2, null, null]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 3, 4]
...
sk2:select{}
---
- - [0, 0, null]
  - [2, null, null]
  - [1, null, 1]
  - [3, 3, 3]
  - [4, 3, 4]
...
-- Check duplicate conflict on replace.
s:replace{4, 4, 3} -- fail
---
- error: Duplicate key exists in unique index 'sk2' in space 'test'
...
s:replace{4, 4, box.NULL} -- ok
---
- [4, 4, null]
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [2, null, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk:select{}
---
- - [1, null, 1]
  - [2, null, null]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk2:select{}
---
- - [0, 0, null]
  - [2, null, null]
  - [4, 4, null]
  - [1, null, 1]
  - [3, 3, 3]
...
_ = pk:delete{2}
---
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [3, 3, 3]
  - [4, 4, null]
...
sk:select{}
---
- - [1, null, 1]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk2:select{}
---
- - [0, 0, null]
  - [4, 4, null]
  - [1, null, 1]
  - [3, 3, 3]
...
s:drop()
---
...
--
-- gh-2880: allow to store less field count than specified in a
-- format.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2', type = 'unsigned'}
---
...
format[3] = {name = 'field3'}
---
...
format[4] = {name = 'field4', is_nullable = true}
---
...
s = box.schema.create_space('test', {engine = engine, format = format})
---
...
pk = s:create_index('pk')
---
...
sk = s:create_index('sk', {parts = {2, 'unsigned'}})
---
...
s:replace{1, 2} -- error
---
- error: Tuple field count 2 is less than required (expected at least 3)
...
t1 = s:replace{2, 3, 4}
---
...
t2 = s:replace{3, 4, 5, 6}
---
...
t1.field1, t1.field2, t1.field3, t1.field4
---
- 2
- 3
- 4
- null
...
t2.field1, t2.field2, t2.field3, t2.field4
---
- 3
- 4
- 5
- 6
...
 -- Ensure the tuple is read ok from disk in a case of vinyl.
---
...
if engine == 'vinyl' then box.snapshot() end
---
...
s:select{2}
---
- - [2, 3, 4]
...
s:drop()
---
...
-- Check the case when not contiguous format tail is nullable.
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2', type = 'unsigned'}
---
...
format[3] = {name = 'field3'}
---
...
format[4] = {name = 'field4', is_nullable = true}
---
...
format[5] = {name = 'field5'}
---
...
format[6] = {name = 'field6', is_nullable = true}
---
...
format[7] = {name = 'field7', is_nullable = true}
---
...
s = box.schema.create_space('test', {engine = engine, format = format})
---
...
pk = s:create_index('pk')
---
...
sk = s:create_index('sk', {parts = {2, 'unsigned'}})
---
...
s:replace{1, 2} -- error
---
- error: Tuple field count 2 is less than required (expected at least 5)
...
s:replace{2, 3, 4} -- error
---
- error: Tuple field count 3 is less than required (expected at least 5)
...
s:replace{3, 4, 5, 6} -- error
---
- error: Tuple field count 4 is less than required (expected at least 5)
...
t1 = s:replace{4, 5, 6, 7, 8}
---
...
t2 = s:replace{5, 6, 7, 8, 9, 10}
---
...
t3 = s:replace{6, 7, 8, 9, 10, 11, 12}
---
...
t1.field1, t1.field2, t1.field3, t1.field4, t1.field5, t1.field6, t1.field7
---
- 4
- 5
- 6
- 7
- 8
- null
- null
...
t2.field1, t2.field2, t2.field3, t2.field4, t2.field5, t2.field6, t2.field7
---
- 5
- 6
- 7
- 8
- 9
- 10
- null
...
t3.field1, t3.field2, t3.field3, t3.field4, t3.field5, t3.field6, t3.field7
---
- 6
- 7
- 8
- 9
- 10
- 11
- 12
...
s:select{}
---
- - [4, 5, 6, 7, 8]
  - [5, 6, 7, 8, 9, 10]
  - [6, 7, 8, 9, 10, 11, 12]
...
s:drop()
---
...
-- Check nullable indexes with other types
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
_ = s:create_index('i1', {parts = {{2, 'string', is_nullable = true}}})
---
...
_ = s:create_index('i2', {parts = {{3, 'number', is_nullable = true}}})
---
...
_ = s:create_index('i3', {parts = {{4, 'integer', is_nullable = true}}})
---
...
_ = s:create_index('i4', {parts = {{5, 'boolean', is_nullable = true}}, unique = false})
---
...
_ = s:create_index('i5', {parts = {{6, 'scalar', is_nullable = true}}})
---
...
_ = s:auto_increment{box.NULL, 1.11, -111, false, '111'}
---
...
_ = s:auto_increment{'222', box.NULL, -222, true, 222}
---
...
_ = s:auto_increment{'333', 3.33, box.NULL, false, 3.33}
---
...
_ = s:auto_increment{'444', 4.44, -444, box.NULL, true}
---
...
_ = s:auto_increment{'555', 5.55, -555, false, box.NULL}
---
...
box.snapshot()
---
- ok
...
_ = s:auto_increment{box.NULL, 6.66, -666, true, '666'}
---
...
_ = s:auto_increment{'777', box.NULL, -777, false, 777}
---
...
_ = s:auto_increment{'888', 8.88, box.NULL, true, 8.88}
---
...
_ = s:auto_increment{'999', 9.99, -999, box.NULL, false}
---
...
_ = s:auto_increment{'000', 0.00, -000, true, box.NULL}
---
...
s.index.i1:select()
---
- - [1, null, 1.11, -111, false, '111']
  - [6, null, 6.66, -666, true, '666']
  - [10, '000', 0, 0, true, null]
  - [2, '222', null, -222, true, 222]
  - [3, '333', 3.33, null, false, 3.33]
  - [4, '444', 4.44, -444, null, true]
  - [5, '555', 5.55, -555, false, null]
  - [7, '777', null, -777, false, 777]
  - [8, '888', 8.88, null, true, 8.88]
  - [9, '999', 9.99, -999, null, false]
...
s.index.i2:select()
---
- - [2, '222', null, -222, true, 222]
  - [7, '777', null, -777, false, 777]
  - [10, '000', 0, 0, true, null]
  - [1, null, 1.11, -111, false, '111']
  - [3, '333', 3.33, null, false, 3.33]
  - [4, '444', 4.44, -444, null, true]
  - [5, '555', 5.55, -555, false, null]
  - [6, null, 6.66, -666, true, '666']
  - [8, '888', 8.88, null, true, 8.88]
  - [9, '999', 9.99, -999, null, false]
...
s.index.i3:select()
---
- - [3, '333', 3.33, null, false, 3.33]
  - [8, '888', 8.88, null, true, 8.88]
  - [9, '999', 9.99, -999, null, false]
  - [7, '777', null, -777, false, 777]
  - [6, null, 6.66, -666, true, '666']
  - [5, '555', 5.55, -555, false, null]
  - [4, '444', 4.44, -444, null, true]
  - [2, '222', null, -222, true, 222]
  - [1, null, 1.11, -111, false, '111']
  - [10, '000', 0, 0, true, null]
...
s.index.i4:select()
---
- - [4, '444', 4.44, -444, null, true]
  - [9, '999', 9.99, -999, null, false]
  - [1, null, 1.11, -111, false, '111']
  - [3, '333', 3.33, null, false, 3.33]
  - [5, '555', 5.55, -555, false, null]
  - [7, '777', null, -777, false, 777]
  - [2, '222', null, -222, true, 222]
  - [6, null, 6.66, -666, true, '666']
  - [8, '888', 8.88, null, true, 8.88]
  - [10, '000', 0, 0, true, null]
...
s.index.i5:select()
---
- - [5, '555', 5.55, -555, false, null]
  - [10, '000', 0, 0, true, null]
  - [9, '999', 9.99, -999, null, false]
  - [4, '444', 4.44, -444, null, true]
  - [3, '333', 3.33, null, false, 3.33]
  - [8, '888', 8.88, null, true, 8.88]
  - [2, '222', null, -222, true, 222]
  - [7, '777', null, -777, false, 777]
  - [1, null, 1.11, -111, false, '111']
  - [6, null, 6.66, -666, true, '666']
...
s:drop()
---
...
-- Check that action property is consistent if nullable
format = {}
---
...
format[1] = { name = 'field1', type = 'unsigned' }
---
...
format[2] = { name = 'field2', type = 'unsigned', is_nullable = false}
---
...
s = box.schema.space.create('test', { engine = engine, format = format })
---
...
pk = s:create_index('pk')
---
...
format[2].action = 'abort'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'rollback'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'fail'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'ignore'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'replace'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'default'
---
...
s:format(format) -- Ok.
---
...
format[2].action = 'none'
---
...
s:format(format) -- Fail.
---
- error: 'Can''t modify space ''test'': field 2 has conflicting nullability and action
    properties'
...
format[2].is_nullable = false
---
...
format[2].action = 'abort'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'rollback'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'fail'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'ignore'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'replace'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'default'
---
...
s:format(format) -- Fail.
---
...
format[2].action = 'none'
---
...
s:format(format) -- Ok.
---
- error: 'Can''t modify space ''test'': field 2 has conflicting nullability and action
    properties'
...
parts = {}
---
...
parts[1] = {field = 2, type = 'unsigned', is_nullable = true, action = 'abort'}
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'rollback'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'fail'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'ignore'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'replace'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'default'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'none'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: Field 2 is not nullable in space format, but nullable in index parts
...
parts[1].is_nullable = false
---
...
parts[1].action = 'none'
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: 'Wrong index options (field 1): index part: conflicting nullability and action
    properties'
...
parts[1].action = 'abort'
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
sk:drop()
---
...
parts[1].action = 'rollback'
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
sk:drop()
---
...
parts[1].action = 'replace'
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
sk:drop()
---
...
parts[1].action = 'fail'
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
sk:drop()
---
...
parts[1].action = 'ignore'
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
s:drop()
---
...
